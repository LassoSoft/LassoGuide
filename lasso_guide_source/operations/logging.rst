.. _logging:

.. direct from book

*******
Logging
*******

Lasso has a built-in log routing system that allows built-in messages to be
routed to several destinations. Lasso provides two methods of logging errors or
page accesses.

-  `Overview`_ describes the built-in log routing system for messages generated
   by Lasso.
-  `Log Tags`_ describes the ``[Log_ ]`` tags that allow errors, warnings,
   details, action statements, and deprecated warning messages from Lasso code
   to be written to Lasso s internal error logs.
-  `Log Files`_ describes the ``[Log]``   ``[/Log]`` tags which allow data to be
   written to a text file.
-  `Log Routing`_ describes the tags that can be used to alter the routing of
   messages to Lasso s internal error logs.

.. Note:: See the chapter on :ref:`Files <files>` for general information about
   writing data to files.

Overview
========

Lasso Professional 8 has a built-in error logging system which allows warning
messages to be logged at several different levels. Each log level can be routed
to one or more destinations allowing for a great deal of flexibility in handling.

The built-in log levels include:

Error
   Critical errors that affect the operation of Lasso Service. Critical errors
   are logged to all destinations by default. Typically, the server or site
   administrator will need to fix whatever is causing the critical error.
Warning
   Warnings are informative messages about possible problems with the
   functioning of Lasso Service. Warnings do not always require action by the
   server or site administrator. Warnings are logged only to the console by
   default.
Detail
   Detailed messages about the normal functioning of Lasso Service. Includes
   status messages from the email queue and event scheduler, etc. Detail
   messages are logged only to the console by default.
Action Statement
   The SQL statements generated by SQL data sources are logged as action
   statements. Other data sources may also log their implementation-specific
   action statements. Action statements are logged only to the console by default.
Deprecated
   Flags any use of deprecated functionality in Lasso code. Deprecated tags are
   supported in this version of Lasso, but may not be supported in a future
   version. Any deprecated functionality should be updated to new, preferred
   syntax for best compatibility with future versions of Lasso. Deprecated
   messages are logged only to the console by default.

The destinations which the log levels can be routed to include:

Database
   The ``_Errors`` table in the ``Lasso_Internal`` Lasso MySQL database,
   viewable via the *Utility > Errors > Lasso Errors* page in Lasso
   Administration.
Console
   The Lasso Service console window. Viewable if Lasso Service is started in
   console mode.
LassoErrors.txt
   The ``LassoErrors.txt`` file, located in the appropriate site folder in the
   ``Lasso Professional 8`` application folder.

The routing of Lasso s internal log levels can be modified in the *Utility >
Errors > Setup* section of Site Administration. For information on setting up
Lasso s internal error routing, see the ***Site Utilities*** chapter in the
***Lasso Professional 8 Setup Guide***.

See the following section on `Log Tags`_ for details about how to log messages
from a Lasso solution using the built-in error message routing system. For
details about how to change the log level routing programmatically see the
subsequent `Log Routing`_ section.

Log Tags
========

The ``[Log_Critical]``, ``[Log_Warning]``, ``[Log_Detail]``, and
``[Log_Deprecated]`` tags are used to log custom data to the Lasso internal
error logs with a defined Lasso error level of ``Critical``, ``Warning``,
``Detail``, or ``Deprecated``. The following example outputs the date and time
of a page request (with a literal space between) to Lasso s internal error logs
with an error level of Detail.

::

   [Log_Detail: (Server_Date) + ' ' + (Server_Time)]

[Log_Critical]
   Logs to Lasso's internal error logs with an error level assignment of
   ``Critical``. Requires the text to be logged as a parameter. Logging options
   for this error level are set in Lasso Administration.

[Log_Warning]
   Logs to Lasso's internal error logs with an error level assignment of
   ``Warning``. Requires the text to be logged as a parameter. Logging options
   for this error level are set in Lasso Administration.

[Log_Detail]
   Logs to Lasso's internal error logs with an error level assignment of
   ``Detail``. Requires the text to be logged as a parameter. Logging options
   for this error level are set in Lasso Administration.

[Log_SQL]
   Logs to Lasso's internal error logs with an error level assignment of
   ``Action Statement``. Requires the text to be logged as a parameter. Logging
   options for this error level are set in Lasso Administration.

[Log_Deprecated]
   Logs to Lasso's internal error logs with an error level assignment of
   ``Deprecated``. Requires the text to be logged as a parameter. Logging
   options for this error level are set in Lasso Administration.

[Log_Always]
   Logs to Lasso's console. This error level cannot be routed, but is always
   sent to Lasso's console.


**To log Lasso page errors to the Lasso Service console and Lasso
Administration:**

Use the ``[Log_Critical]``, ``[Log_Warning]``, ``[Log_Detail]``, or
``[Log_Deprecated]`` tags. This will log any information contained in the tags
in Lasso s internal error logs with a Lasso error level of ``Critical``,
``Warning``, ``Detail``, or ``Deprecated``. The following example will log a
warning to Lasso s internal logs if an ``Out Of Memory`` error occurs while
processing the Lasso page.

::

   [If: (Error_CurrentError) == (Error_OutOfMemory)]
   [Log_Warning: 'A memory error occured while processing this page.']
   [/If]

   ->
   Warning: A memory error occured while processing this page.

If the ``Lasso Errors Database`` and ``Lasso Service Console`` options were
selected for ``Warning`` in the **Utility > Errors > Setup** page in Lasso
Administration, then this message will be logged and displayed in both the Lasso
Service console window and the **Utility > Errors > Lasso Errors** page in Lasso
Administration.

Log Files
=========

In addition to using the built-in log level routing system, it is sometimes
desirable to create a separate log file specific to a custom solution. The
``[Log]   [/Log]`` tags can be used to write text messages out to a text log
file. When executed, the contents of the ``[Log] [/Log]`` container tags is
appended to a specified text file. The ``[Log]   [/Log]`` tags can write to any
text file that is in the Web server root and accessible from Lasso. All returns,
tabs, and spaces between the ``[Log]   [/Log]`` tags will be included in the
output data.

The following ``[Log]   [/Log]`` tags output a single line containing the date
and time with a return at the end to the file specified. The tags are shown
first with a Windows path, then with a Mac OS X path.

::

   [Log: 'C://Logs/LassoLog.txt'][Server_Date] [Server_Time]
   [/Log]

   [Log: '///Logs/LassoLog.txt'][Server_Date] [Server_Time]
   [/Log]

The path to the directory where the log will be stored should be specified
according to the same rules as those for the file tags. See the :ref:`File Tags
<files-file-tags>` section in the Files chapter for full details about relative,
absolute, and fully qualified paths on both Mac OS X and Windows.

``[Log]   [/Log]``
   Logs the contents of the container tags to a specified text file. Requires
   the path to the text file as a parameter: An optional ``-Encoding`` parameter
   specifies the character set to use to write the log file (defaults to
   Mac-Roman on Mac OS X and ISO-8859-1 on other platforms.
  

**To log site visits to a file:**

Use the ``[Server_ ]`` and ``[Client_ ]`` tags to return information about the
current visitor and what page they are visiting. The following code will log the
current date and time, the visitor s IP address, the name of the server and the
page they were loading, and the ``GET`` and ``POST`` parameters that were
specified.

::

   [Log: 'E://Logs/LassoLog.txt'][Server_Date: -Extended] [Server_Time: -Extended] [Client_IP] [Server_Name] [Response_
   FilePath] [Client_GETArgs] [Client_POSTArgs]
   [/Log]

See the ``HTTP/HTML`` Content and Controls chapter for more information a about
the ``[Client_ ]`` and ``[Server_ ]`` tags.

**To automatically roll log files by date:**

Include a date component in the name of the log file. Since the date component
will change every day, a new log file will be created the first time an item is
logged each day. ``[Server_Date: -Extended]`` creates a safe date format to use.
The following example logs to a file named e.g. ``2001-05-31.txt``.

::

   [Variable: 'Log_File' = '///Logs/' + (Server_Date: -Extended) + '.txt']
   [Log: (Variable: 'Log_File'][Server_Date] [Server_Time]
   [/Log]

.. _log-routing:

Log Routing
===========

The tag for setting log routing is described in the :ref:`Log Preference Tag
<logging-table-3>` table. Log preferences can be viewed or changed in the
**Utility > Errors > Setup** section of Lasso Administration. Use of this tag is
only necessary to change the log settings programmatically.

``[Log_SetDestination]``
   The first parameter specifies a log message level. Subsequent parameters
   specify the destination to which that level of messages should be logged.
  

.. Note:: The ``[Log_SetDestination]`` tag can only be used by the global
   administrator. Use an ``[Auth_Admin]`` tag to authorize use of this tag.

The first parameter of ``[Log_SetDestination]`` requires a log message level.
The three available log message levels are detailed in the :ref:`Log Message
Levels <logging-table-4>` table.

``Log_Level_Critical``
   Critical error messages that affect the proper functioning of Lasso Service
   or requires action by the administrator.
  
``Log_Level_Warning``
   Informative messages about what actions are being performed by Lasso Service.
   Generally do not require action by the administrator.
  
``Log_Level_Detail``
   Detailed messages about the inner workings of Lasso Service.
  
``Log_Level_SQL``
   Action statements generated by inline database actions. SQL statements are
   logged at this level.
  
``Log_Level_Deprecated``
   Warnings about the use of deprecated functionality in Lasso.
  

Subsequent parameters of ``[Log_SetDestination]`` require a destination code.
The three available destinations available are detailed here.

``Log_Destination_Console``
   Messages are logged to the Lasso Service console. Visible on Windows 2000
   when Lasso Service is launched as an application and on Mac OS X when the
   ``consoleLassoService.command`` script is used.
  
``Log_Destination_File``
   Messages are logged to the ``LassoErrors.txt`` file which is created in the
   same folder as Lasso Service.

``Log_Destination_Database``
   Messages are logged to the errors table of the site database which can be
   viewed in the **Utility > Errors** section of Lasso Administration.
  

**To change the log preferences:**

Use the ``[Log_SetDestination]`` tag to change the destination of a given log
message level. In the following example, detail messages are sent to the console
and to the errors table of the site database.

::

   [Auth_Admin]
   [Log_SetDestination: Log_Level_Detail,
      Log_Destination_Database, Log_Destination_Console]

**To reset the log preferences:**

The following four commands reset the log preferences to their default values.
Critical errors are sent to all three destinations. Warnings, detail, and
deprecation warning messages are sent only to the console.

::

   [Auth_Admin]
   [Log_SetDestination: Log_Level_Critical,
      Log_Destination_Console, Log_Destination_Database, Log_Destination_File]
   [Log_SetDestination: Log_Level_Warning, Log_Destination_Console]
   [Log_SetDestination: Log_Level_Detail, Log_Destination_Console]
   [Log_SetDestination: Log_Level_SQL, Log_Destination_Console]
   [Log_SetDestination: Log_Level_Deprecated, Log_Destination_Console]
